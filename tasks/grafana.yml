---
- name: grafana - checking ressource access
  become: false
  uri:
    url: "{{ grafana_repo_key }}"
  register: grafana_http_response
  ignore_errors: true

- name: grafana - remove conflicting packages
  package:
    name: grafana-data
    state: absent
  register: _old_grafana_pkgs

- command: rpm --import "{{ grafana_local_key }}"
  args:
    warn: false
  register: rpm_install
  failed_when: rpm_install.rc != 0 and "is already installed" not in rpm_install.stderr
  changed_when: rpm_install.rc == 0
  when: grafana_http_response.status != 200

- name: install grafana rpm from a local file
  yum:
    name: "{{ grafana_rpm }}"
    state: present
  when: grafana_http_response.status != 200
  
- name: grafana - add repository
  yum_repository:
    name: grafana
    description: grafana
    baseurl: "{{ grafana_repo }}"
    gpgcheck: yes
    gpgkey: "{{ grafana_repo_key }}"
  when: grafana_http_response.status == 200

- name: grafana - install packages
  package:
    name: "{{ grafana_package }}"
    state: "{{ (grafana_version == 'latest') | ternary('latest', 'present') }}"
  register: _install_packages
  until: _install_packages is succeeded
  retries: 5
  delay: 2
  when: grafana_http_response.status == 200

- name: grafana - enable service
  systemd:
    name: grafana-server
    state: started
    enabled: yes
    daemon_reload: yes
      
- name: grafana - start and enable firewalld
  service:
    name: firewalld
    state: started
    enabled: yes
  when: grafana_firewalld | bool

- name: grafana - open port 3000
  firewalld:
    port: 3000/tcp
    permanent: true
    immediate: true
    state: enabled
  when: grafana_firewalld | bool

- name: grafana - check if eonweb
  stat: path=/srv/eyesofnetwork/eonweb
  register: check_eonweb

- name: grafana - eon configuration
  block:

  - name : grafana - global configuration
    ini_file:
      path: "{{ grafana_config }}"
      section: "{{item.section}}"
      option: "{{item.option}}"
      value: "{{item.value}}"
    with_items:
      - { section: server, option: http_addr, value: "127.0.0.1" }
      - { section: server, option: root_url, value: "%(protocol)s://%(domain)s/grafana/" }
      - { section: users, option: allow_sign_up, value: "false" }
      - { section: users, option: allow_org_create, value: "false" }
      - { section: users, option: default_theme, value: '"light"' }
      - { section: auth, option: disable_login_form, value: "true" }
      - { section: auth, option: disable_signout_menu, value: "true" }
      - { section: auth.proxy, option: enabled, value: "true" }
      - { section: auth.proxy, option: whitelist, value: "" }
      - { section: auth.anonymous, option: enabled, value: "true" }
      - { section: auth.anonymous, option: org_role, value: "Viewer" }
      - { section: security, option: allow_embedding, value: "true" }
      - { section: alerting, option: enabled, value, "false" }
    notify: restart grafana

  - name: grafana - apache configuration
    template:
      src: grafana/grafana.conf.j2
      dest: "/etc/httpd/conf.d/grafana.conf"
    notify: reload httpd

  - name: grafana - update eonweb menus
    template:
      src:  "grafana/{{item.src}}"
      dest: "{{item.dest}}"
    with_items:
      - { src: custom.menus.json.j2, dest: /srv/eyesofnetwork/eonweb/include/languages/custom.menus.json }
      - { src: custom.messages.json.j2, dest: /srv/eyesofnetwork/eonweb/include/languages/custom.messages.json }
      - { src: custom.messages-fr.json.j2, dest: /srv/eyesofnetwork/eonweb/include/languages/custom.messages-fr.json }

  - name: grafana - Extract grafana-thruk-datasource-master.zip
    unarchive:
      src: "{{ grafana_thruk_zip }}"
      dest: "/var/lib/grafana/plugins/"
    when: grafana_http_response.status != 200

  - name: grafana - add thruk datasource plugin
    grafana_plugin:
      name: sni-thruk-datasource
      state: present
    notify: restart grafana

  - name: grafana - add thruk datasource
    grafana_datasource:
      name: "Thruk"
      grafana_url: "http://127.0.0.1:3000"
      url: "https://127.0.0.1/thruk/"
      ds_type: "sni-thruk-datasource"
      tls_skip_verify : yes
      validate_certs: no
      state: present
    notify: restart grafana
    ignore_errors: true
    when: "ansible_version.full is version_compare('2.10', '>=')" # for future use

  when: check_eonweb.stat.exists == True

- name: grafana - force restart # Restart grafana service now!
  meta: flush_handlers
