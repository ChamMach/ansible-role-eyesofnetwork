---
- name: nagflux - checking ressource access
  become: false
  uri:
    url: "{{ nagflux_git }}"
  register: nagflux_http_response
  ignore_errors: true

- name: nagflux - install dependencies
  package:
    name: "{{ item }}"
    state: latest
  with_items:
  - "{{ nagflux_packages }}"
  when: nagflux_http_response.status == 200

- name: nagflux - Find all rpm files 
  find:
    paths: "{{ role_path }}/files/packages/nagflux/"
    patterns: "*.rpm"
  register: rpm_files
  when: nagflux_http_response.status != 200

- set_fact:
    rpm_list: "{{ rpm_files.files | map(attribute='path') | list}}"
  when: nagflux_http_response.status != 200

- name: nagflux - installing the rpm files
  yum:
    name: "{{rpm_list}}"
    state: present
  when: nagflux_http_response.status != 200

- name: nagflux - create directories
  file: 
    path: "{{ item }}" 
    state: directory
  with_items:
    - "{{ nagflux_gopath }}"
    - "{{ nagflux_path }}"
    - "{{ nagflux_perfdata }}"
    - "{{ nagflux_spool }}"

- name: nagflux - set perfdata directory owners
  file:
    path: "{{ nagflux_perfdata }}"
    owner: nagios
    group: eyesofnetwork

- name: nagflux - directory
  file:
    path: "{{ nagflux_gopath }}/src/{{ nagflux_git_dir }}"
    state: directory
    mode: '0755'
  when: nagflux_http_response.status != 200

- name: nagflux - Extract nagflux.tgz
  unarchive:
    src: "{{ nagflux_tgz }}"
    dest: "{{ nagflux_gopath }}/src/{{ nagflux_git_dir }}"
  when: nagflux_http_response.status != 200

- name: nagflux - get go project
  shell: "go get -u {{ nagflux_git_dir }}"
  environment:
    GOPATH: "{{ nagflux_gopath }}"
  changed_when: false
  when: nagflux_http_response.status == 200

- name: nagflux - build go project
  shell: "go build {{ nagflux_git_dir }}"
  environment:
    GOPATH: "{{ nagflux_gopath }}"
  changed_when: false

- name: nagflux - copy files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    remote_src: yes
  with_items:
    - { src: "{{ nagflux_gopath }}/src/github.com/griesbacher/nagflux/nagflux.service", dest: "/usr/lib/systemd/system/nagflux.service", mode: 644 }

- name: nagflux - configure nagflux service
  ini_file:
    path: "/usr/lib/systemd/system/nagflux.service"
    section: "Service"
    option: "ExecStart"
    value: "{{ nagflux_path }}/nagflux -configPath {{ nagflux_path }}/config.gcfg"

- name: nagflux - enable service
  systemd:
    name: nagflux.service
    state: started
    enabled: yes
    daemon_reload: yes

- name: nagflux - copy configuration
  template:
    src: nagflux/config.gcfg.j2
    dest: "{{nagflux_path}}/config.gcfg"
  notify: restart nagflux

- name: nagflux - copy nagios configuration
  template:
    src: nagflux/nagflux.sql.j2
    dest: "/tmp/nagflux.sql"

- name: nagflux - copy pnp4nagios migrate script
  template:
    src: nagflux/migrate_pnp_to_nagflux.pl.j2
    dest: "{{nagflux_path}}/migrate_pnp_to_nagflux.pl"
    mode: 0744

- name: nagflux - insert nagios configuration
  mysql_db:
    state: import
    name: lilac
    target: "/tmp/nagflux.sql"
    login_user: "{{ nagflux_mysql_user }}"
    login_password: "{{ nagflux_mysql_pass }}"
  notify: export nagios

- name: nagflux - create grafana datasource
  grafana_datasource:
    grafana_url: "{{ grafana_url }}"
    grafana_user: "{{ grafana_admin_user }}"
    grafana_password: "{{ grafana_admin_pass }}"
    name: "nagflux"
    url: "{{influxdb_url}}"
    ds_type: "influxdb"
    access: "proxy"
    is_default: true
    database: "nagflux"

- name: nagflux - disable npcd
  systemd:
    name: npcd
    state: stopped
    enabled: no
